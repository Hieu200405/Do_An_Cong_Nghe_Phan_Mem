import React, { useState } from 'react';
import {
  Container,
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Stepper,
  Step,
  StepLabel,
  Alert,
  CircularProgress,
  IconButton,
  InputAdornment,
} from '@mui/material';
import {
  Visibility,
  VisibilityOff,
  Email,
  Person,
  Phone,
} from '@mui/icons-material';
import { Link, useNavigate } from 'react-router-dom';
import { authAPI } from '../../services/api';

const steps = ['Th√¥ng tin c√° nh√¢n', 'X√°c th·ª±c email', 'Ho√†n t·∫•t'];

const Register: React.FC = () => {
  const navigate = useNavigate();
  const [activeStep, setActiveStep] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Form fields
  const [email, setEmail] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [fullName, setFullName] = useState('');
  const [phone, setPhone] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [otp, setOtp] = useState('');
  const [otpSent, setOtpSent] = useState(false);
  const [fakeOtp, setFakeOtp] = useState('');

  const validateStep = () => {
    switch (activeStep) {
      case 0:
        if (!fullName || !email || !username || !password || !confirmPassword || !phone) {
          setError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
          return false;
        }
        if (password !== confirmPassword) {
          setError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.');
          return false;
        }
        if (password.length < 8) {
          setError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±.');
          return false;
        }
        if (!/^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/.test(email)) {
          setError('Email kh√¥ng h·ª£p l·ªá.');
          return false;
        }
        if (!/^[0-9]{10}$/.test(phone)) {
          setError('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.');
          return false;
        }
        if (username.length < 3) {
          setError('T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±.');
          return false;
        }
        if (!/^[a-zA-Z0-9_]+$/.test(username)) {
          setError('T√™n ƒëƒÉng nh·∫≠p ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi.');
          return false;
        }
        break;
      case 1:
        if (!otp) {
          setError('Vui l√≤ng nh·∫≠p m√£ OTP.');
          return false;
        }
        if (otp.length !== 6) {
          setError('M√£ OTP ph·∫£i c√≥ 6 s·ªë.');
          return false;
        }
        break;
    }
    return true;
  };

  const handleNext = async () => {
    if (!validateStep()) return;

    try {
      setIsLoading(true);
      setError(null);

      switch (activeStep) {
        case 0:
          // T·∫°o OTP gi·∫£ 6 s·ªë
          const generatedOtp = Math.floor(100000 + Math.random() * 900000).toString();
          setFakeOtp(generatedOtp);
          console.log('üîê OTP gi·∫£ ƒë∆∞·ª£c t·∫°o:', generatedOtp);
          await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
          setOtpSent(true);
          break;
        case 1:
          // X√°c th·ª±c OTP gi·∫£
          if (otp !== fakeOtp) {
            setError('M√£ OTP kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra l·∫°i.');
            return;
          }
          await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
          break;
        case 2:
          // Ho√†n t·∫•t ƒëƒÉng k√Ω v·ªõi API th·∫≠t
          try {
            const userData = {
              fullName,
              username,
              email,
              password,
              phone,
            };
            
            const response = await authAPI.register(userData);
            console.log('‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:', response);
            
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            setError(null);
            
            // Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p sau 2 gi√¢y
            setTimeout(() => {
              navigate('/login');
            }, 2000);
            
          } catch (err: any) {
            console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', err);
            setError(err?.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
            return;
          }
          return;
      }

      setActiveStep((prev) => prev + 1);
    } catch (err) {
      setError('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendOtp = async () => {
    try {
      setIsLoading(true);
      setError(null);
      // T·∫°o OTP gi·∫£ m·ªõi
      const newOtp = Math.floor(100000 + Math.random() * 900000).toString();
      setFakeOtp(newOtp);
      console.log('üîê OTP gi·∫£ m·ªõi ƒë∆∞·ª£c t·∫°o:', newOtp);
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
      setOtpSent(true);
    } catch (err) {
      setError('Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ OTP. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsLoading(false);
    }
  };

  const renderStepContent = () => {
    switch (activeStep) {
      case 0:
        return (
          <Box>
            <TextField
              fullWidth
              label="H·ªç v√† t√™n"
              value={fullName}
              onChange={(e) => setFullName(e.target.value)}
              required
              sx={{ mb: 2 }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Person />
                  </InputAdornment>
                ),
              }}
            />
            <TextField
              fullWidth
              label="Email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              sx={{ mb: 2 }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Email />
                  </InputAdornment>
                ),
              }}
            />
            <TextField
              fullWidth
              label="T√™n ƒëƒÉng nh·∫≠p"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
              sx={{ mb: 2 }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Person />
                  </InputAdornment>
                ),
              }}
            />
            <TextField
              fullWidth
              label="S·ªë ƒëi·ªán tho·∫°i"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              required
              sx={{ mb: 2 }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Phone />
                  </InputAdornment>
                ),
              }}
            />
            <TextField
              fullWidth
              label="M·∫≠t kh·∫©u"
              type={showPassword ? 'text' : 'password'}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              sx={{ mb: 2 }}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={() => setShowPassword(!showPassword)}
                      edge="end"
                    >
                      {showPassword ? <VisibilityOff /> : <Visibility />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
            <TextField
              fullWidth
              label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
              type={showConfirmPassword ? 'text' : 'password'}
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              sx={{ mb: 2 }}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      edge="end"
                    >
                      {showConfirmPassword ? <VisibilityOff /> : <Visibility />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
          </Box>
        );
      case 1:
        return (
          <Box>
            <Typography paragraph>
              Ch√∫ng t√¥i ƒë√£ g·ª≠i m√£ x√°c th·ª±c ƒë·∫øn email: {email}
            </Typography>
            
            {/* Hi·ªÉn th·ªã OTP gi·∫£ cho test */}
            <Alert severity="info" sx={{ mb: 2 }}>
              <Typography variant="body2">
                <strong>üîê OTP gi·∫£ (ch·ªâ ƒë·ªÉ test):</strong> {fakeOtp}
              </Typography>
            </Alert>
            
            <TextField
              fullWidth
              label="M√£ x√°c th·ª±c (OTP)"
              value={otp}
              onChange={(e) => setOtp(e.target.value)}
              required
              sx={{ mb: 2 }}
            />
            <Button
              fullWidth
              variant="text"
              onClick={handleResendOtp}
              disabled={isLoading}
            >
              G·ª≠i l·∫°i m√£ OTP
            </Button>
          </Box>
        );
      case 2:
        return (
          <Box sx={{ textAlign: 'center' }}>
            {isLoading ? (
              <>
                <CircularProgress size={60} sx={{ mb: 2 }} />
                <Typography variant="h6" gutterBottom>
                  ƒêang t·∫°o t√†i kho·∫£n...
                </Typography>
                <Typography paragraph>
                  Vui l√≤ng ch·ªù trong gi√¢y l√°t.
                </Typography>
              </>
            ) : (
              <>
                <Typography variant="h6" gutterBottom color="success.main">
                  ‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!
                </Typography>
                <Typography paragraph>
                  T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  ƒêang chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p...
                </Typography>
              </>
            )}
          </Box>
        );
    }
  };

  return (
    <Container maxWidth="sm" sx={{ py: 4 }}>
      <Paper elevation={3} sx={{ p: 4, borderRadius: 2 }}>
        <Typography variant="h4" component="h1" align="center" gutterBottom>
          ƒêƒÉng k√Ω t√†i kho·∫£n
        </Typography>

        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        {renderStepContent()}

        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>
          <Button
            variant="outlined"
            disabled={activeStep === 0 || isLoading}
            onClick={() => setActiveStep((prev) => prev - 1)}
          >
            Quay l·∫°i
          </Button>
          <Button
            variant="contained"
            onClick={handleNext}
            disabled={isLoading}
          >
            {isLoading ? (
              <CircularProgress size={24} />
            ) : activeStep === steps.length - 1 ? (
              'Ho√†n t·∫•t'
            ) : (
              'Ti·∫øp t·ª•c'
            )}
          </Button>
        </Box>

        <Box sx={{ mt: 2, textAlign: 'center' }}>
          <Typography variant="body2">
            ƒê√£ c√≥ t√†i kho·∫£n?{' '}
            <Link to="/login" style={{ textDecoration: 'none' }}>
              ƒêƒÉng nh·∫≠p ngay
            </Link>
          </Typography>
        </Box>
      </Paper>
    </Container>
  );
};

export default Register; 